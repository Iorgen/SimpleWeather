manage.py - allow to run commands
python3 manage.py runserver : command to run the server
python3 manage.py migrate : command for migrations
python3 manage.py startapp <appname>

- Deploy tutorial

# Docker dependencies needed using the apt command.
1) sudo apt install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common


# add the docker key and repository
2) curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

# update packages
sudo apt update
# install docker
sudo apt install -y docker-ce

# After the installation is complete, start the docker service and enable it to launch every time at system boot.
sudo systemctl start docker
# If not working you will be start docker every time system rebooting
sudo systemctl enable docker

# check that docker working
docker run hello-world


Step 2 - Install Docker-compose
sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose


sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose


# check version
docker-compose version

mkdir -p docker_env
cd docker_env/

mkdir project/ config/

# Copy your requirements.txt file inside config
# When in docker_env
mkdir -p config/nginx/
vim config/nginx/django.conf

/// Insert ////
upstream web {
   ip_hash;
   server web:8000;
 }

 # portal
 server {
   location / {
         proxy_pass http://web/;
     }
   listen 8000;
   server_name localhost;

   location /static {
     autoindex on;
     alias /src/static/;
   }
 }
 /////

# From docker_env dir
vim Dockerfile
///// Insert ////////////
FROM python:3.5-alpine
 ENV PYTHONUNBUFFERED 1

 RUN apk update && \
     apk add --virtual build-deps gcc python-dev musl-dev && \
     apk add postgresql-dev bash

 RUN mkdir /config
 ADD /config/requirements.txt /config/
 RUN pip install -r /config/requirements.txt
 RUN mkdir /src
 WORKDIR /src
/////////////

# From docker_env dir
vim docker-compose.yml
///// Insert ////////////
version: '3'
 services:
   db:
     image: postgres:10.3-alpine
     container_name: postgres01
   nginx:
     image: nginx:1.13-alpine
     container_name: nginx01
     ports:
       - "8000:8000"
     volumes:
       - ./project:/src
       - ./config/nginx:/etc/nginx/conf.d
     depends_on:
       - web
   web:
     build: .
     container_name: django01
     command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py collectstatic --noinput && gunicorn hello_django.wsgi -b 0.0.0.0:8000"
     depends_on:
       - db
     volumes:
       - ./project:/src
     expose:
       - "8000"
     restart: always
////////////////////////////////
# Copy your django project files inside project folder
cd ~/django
cp -r * ~/guide01/project/

# Open settings.py with editor and set
ALLOW_HOSTS = ['web']
DATABASES = {
     'default': {
         'ENGINE': 'django.db.backends.postgresql_psycopg2',
         'NAME': 'postgres',
         'USER': 'postgres',
         'HOST': 'db',
         'PORT': 5432,
     }
}
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

4) Build and run
cd ~/SimpleWeatherDocker/
docker-compose build
if you got:
ERROR: yaml.parser.ParserError: while parsing a block mapping
  in "./docker-compose.yml", line 1, column 1
expected <block end>, but found '<block mapping start>'
  in "./docker-compose.yml", line 2, column 3

got to yaml-online-parser.appspot.com and check your docker-compose.yaml
docker-compose up -d
# check that build and start was successful
docker-compose ps
docker-compose images
Problem with user whot not connected to docker daemon -




1) Tutorial for me
django admin - show list of subcomandas
django-admin startproject <project_name>
python3 manage.py makemigrations : after database changes
python3 manage.py sqlmigrate blog 0001 : create migration command by number of created migration from django ORM
python3 manage.py migrate : initiate migrate process
python3 manage.py startapp users  - for users creation





make new class for parser
parse_response function
params, url, another
add to parsers list



- Get weather info by city:
take city name as input
send query to db server
take response
return response to user


maybe usefull features:
remote procedure call - RPC
pipe link
multiprocessing
celery or apscheduler
Cron task manager







2) Tutorial for deploy
pip3 install - r requirements.txt
if you got a python 2 run: python <command>
python 3 - run python: 3 <command>
or : python <command>


https://djbook.ru/examples/77/
sudo apt-get install postgresql postgresql-server-dev-9.5
sudo -u postgres psql postgres- call postgress console terminal
\password postgres - set passwrod I set 123upc098
    create user user_admin with password '123upc098';
    alter role user_admin set client_encoding to 'utf8';
    alter role user_admin set default_transaction_isolation to 'read committed';
    alter role user_admin set timezone to 'UTC';
    create database django_api_db owner user_name;


database manipulation example
    >>> from ApiWeather.models import Post
    >>> from django.contrib.auth.models import User
    >>> User.objects.all()
    <QuerySet [<User: jurgen>, <User: TestUser>]>
    >>> User.objects.first()
    <User: jurgen>
    >>> User.object.filter(username='jurgen')
    Traceback (most recent call last):
      File "<console>", line 1, in <module>
    AttributeError: type object 'User' has no attribute 'object'
    >>> User.objects.filter(username='jurgen')
    <QuerySet [<User: jurgen>]>
    >>> User.objects.filter(username='jurgen').first()
    <User: jurgen>
    >>> user = User.objects.filter(username='jurgen').first()
    >>> user
    <User: jurgen>
    >>> user.id
    1
    >>> user.pk
    1
    >>> user2 = User.objects.get(id=1)
    >>> user2
    <User: jurgen>
    >>> user2 = User.objects.get(id=2)
    >>> user2
    <User: TestUser>
    >>> Post.objects.all()
    <QuerySet []>
    >>> post_1 = Post(title='blog 1', content='First Post Content!', author=user)
    >>> post_1
    <Post: Post object (None)>
    >>> Post.objects.all()
    <QuerySet []>
    >>> post_1.save
    <bound method Model.save of <Post: Post object (None)>>
    >>> post_1.save()
    >>> Post.objects.all()
    <QuerySet [<Post: Post object (1)>]>
    >>>



    >>> from ApiWeather.models import Post
    >>> from django.contrib.auth.models import User
    >>> Post.objects.all()
    <QuerySet [<Post: blog 1>]>
    >>> user = User.objects.filter(username='jurgen').first()
    >>> user
    <User: jurgen>
    >>> post_2 = Post(title='Blog 2 ', content='Second Post Content', author_id=user.id)
    >>> post_2
    <Post: Blog 2 >
    >>> post_2.save()
    >>> Post.objects.all()
    <QuerySet [<Post: blog 1>, <Post: Blog 2 >]>
    >>> post = Post.objects.first()
    >>> post.contetn
    Traceback (most recent call last):
      File "<console>", line 1, in <module>
    AttributeError: 'Post' object has no attribute 'contetn'
    >>> post.content
    'First Post Content!'
    >>> post.date_posted
    datetime.datetime(2019, 8, 7, 18, 5, 28, 246247, tzinfo=<UTC>)
    >>> post.author
    <User: jurgen>
    >>> post.author.id
    1
    >>> post.author.email
    'iorgenkras@gmail.com'
    >>> user.post_set
    <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x7f81b0cb5518>
    >>> user.post_set.all()
    <QuerySet [<Post: blog 1>, <Post: Blog 2 >]>
    >>> user.post_set.create(title='Blog 3', content='Third Post content')
    <Post: Blog 3>
    >>> Post.objects.all()
    <QuerySet [<Post: blog 1>, <Post: Blog 2 >, <Post: Blog 3>]>
    >>>
